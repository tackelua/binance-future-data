const axios = require('axios');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

const apiKey = process.env.BINANCE_API_KEY;
const apiSecret = process.env.BINANCE_API_SECRET;
const baseUrl = 'https://fapi.binance.com';

// ===================================================================
// ‚úÖ C·∫§U H√åNH
// ===================================================================
const SYMBOLS_TO_CHECK = require('../symbols.json');
const BATCH_SIZE = 10;
// ===================================================================


/**
 * ‚≠êÔ∏è H√ÄM G·ªåI API ƒê√É ƒê∆Ø·ª¢C N√ÇNG C·∫§P V·ªöI C∆† CH·∫æ RETRY ‚≠êÔ∏è
 *
 * @param {string} method - Ph∆∞∆°ng th·ª©c HTTP (GET, POST)
 * @param {string} endpoint - ƒêi·ªÉm cu·ªëi API
 * @param {object} params - C√°c tham s·ªë cho y√™u c·∫ßu
 * @param {number} maxRetries - S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
 * @returns {Promise<any>}
 */
async function callApi(method, endpoint, params = {}, maxRetries = 5) {
    let retries = 0;

    // V√≤ng l·∫∑p ƒë·ªÉ th·ª≠ l·∫°i khi c·∫ßn thi·∫øt
    while (retries < maxRetries) {
        try {
            const timestamp = Date.now();
            const queryString = new URLSearchParams({ ...params, timestamp }).toString();
            const signature = crypto.createHmac('sha256', apiSecret).update(queryString).digest('hex');
            const url = `${baseUrl}${endpoint}?${queryString}&signature=${signature}`;

            const response = await axios({
                method,
                url,
                headers: { 'X-MBX-APIKEY': apiKey },
            });

            // N·∫øu th√†nh c√¥ng, tr·∫£ v·ªÅ d·ªØ li·ªáu v√† tho√°t kh·ªèi v√≤ng l·∫∑p
            return response.data;

        } catch (error) {
            // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† l·ªói rate limit kh√¥ng
            if (error.response && (error.response.status === 429 || error.response.status === 418)) {
                retries++;
                const waitTime = 60; // Ch·ªù 60 gi√¢y khi b·ªã ban
                console.warn(`
          ------------------------------------------------------
          üü° C·∫¢NH B√ÅO: B·ªã gi·ªõi h·∫°n API (L·ªói ${error.response.status}).
          ‚è≥ ƒêang t·∫°m d·ª´ng ${waitTime} gi√¢y... S·∫Ω th·ª≠ l·∫°i l·∫ßn ${retries}/${maxRetries}.
          (Endpoint: ${endpoint}, Symbol: ${params.symbol || 'N/A'})
          ------------------------------------------------------
        `);
                // T·∫°m d·ª´ng script
                await new Promise(resolve => setTimeout(resolve, waitTime * 1000));
                continue; // Quay l·∫°i ƒë·∫ßu v√≤ng l·∫∑p ƒë·ªÉ th·ª≠ l·∫°i
            } else {
                // N·∫øu l√† l·ªói kh√°c (v√≠ d·ª•: symbol kh√¥ng h·ª£p l·ªá), kh√¥ng th·ª≠ l·∫°i
                console.error(`‚ùå L·ªói kh√¥ng th·ªÉ th·ª≠ l·∫°i t·∫°i ${endpoint} cho symbol ${params.symbol || 'N/A'}:`, error.response ? error.response.data.msg : error.message);
                return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n c√°c batch kh√°c
            }
        }
    }

    // N·∫øu ƒë√£ th·ª≠ l·∫°i h·∫øt s·ªë l·∫ßn m√† v·∫´n l·ªói
    console.error(`üö® TH·∫§T B·∫†I: ƒê√£ th·ª≠ l·∫°i ${maxRetries} l·∫ßn cho ${endpoint} v·ªõi symbol ${params.symbol || 'N/A'} m√† kh√¥ng th√†nh c√¥ng.`);
    return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng
}


/**
 * L·∫•y to√†n b·ªô l·ªãch s·ª≠ giao d·ªãch cho M·ªòT symbol (Kh√¥ng c·∫ßn thay ƒë·ªïi)
 */
async function getAllTradesForSymbol(symbol) {
    let allTrades = [];
    let lastTradeId = 0;
    const limit = 1000;

    console.log(`  - ‚è≥ B·∫Øt ƒë·∫ßu l·∫•y l·ªãch s·ª≠ cho [${symbol}]...`);

    while (true) {
        const params = { symbol, limit };
        if (lastTradeId > 0) {
            params.fromId = lastTradeId;
        }

        // Lu√¥n g·ªçi h√†m callApi ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p
        const trades = await callApi('GET', '/fapi/v1/userTrades', params);

        if (trades.length === 0) break;

        const newTrades = trades.filter(t => !allTrades.some(at => at.id === t.id));
        if (newTrades.length === 0) break;

        allTrades = allTrades.concat(newTrades);
        lastTradeId = newTrades[newTrades.length - 1].id + 1;

        if (newTrades.length < limit) break;

        await new Promise(resolve => setTimeout(resolve, 200));
    }
    console.log(`  - ‚úÖ Ho√†n th√†nh [${symbol}], t·ªïng c·ªông ${allTrades.length} giao d·ªãch.`);
    return allTrades;
}


/**
 * H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω theo l√¥ (batch)
 */
async function main() {
    console.log(`üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫•y l·ªãch s·ª≠ cho ${SYMBOLS_TO_CHECK.length} symbols.`);
    console.log(`üì¶ K√≠ch th∆∞·ªõc m·ªói l√¥: ${BATCH_SIZE} y√™u c·∫ßu song song.`);
    console.log('------------------------------------------------------');

    let allAccountTrades = [];
    // Th√™m d√≤ng n√†y ƒë·ªÉ t√≠nh t·ªïng s·ªë l√¥
    const totalBatches = Math.ceil(SYMBOLS_TO_CHECK.length / BATCH_SIZE);

    for (let i = 0; i < SYMBOLS_TO_CHECK.length; i += BATCH_SIZE) {
        const batch = SYMBOLS_TO_CHECK.slice(i, i + BATCH_SIZE);
        const currentBatchNumber = Math.floor(i / BATCH_SIZE) + 1;

        console.log(`\nüåÄ ƒêang x·ª≠ l√Ω l√¥ ${currentBatchNumber}/${totalBatches}... Bao g·ªìm [${batch.join(', ')}]`);

        const promises = batch.map(symbol => getAllTradesForSymbol(symbol));
        const tradesFromBatch = await Promise.all(promises);

        tradesFromBatch.forEach(trades => {
            if (trades.length > 0) {
                allAccountTrades = allAccountTrades.concat(trades);
            }
        });

        console.log(`\n‚úÖ ƒê√£ x·ª≠ l√Ω xong l√¥ ${currentBatchNumber}/${totalBatches}. T·ªïng s·ªë giao d·ªãch hi·ªán t·∫°i: ${allAccountTrades.length}`);

        if (i + BATCH_SIZE < SYMBOLS_TO_CHECK.length) {
            console.log('--- Ngh·ªâ 1 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω l√¥ ti·∫øp theo ---');
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }


    const outputPath = path.join(__dirname, 'allAccountTrades.json');
    fs.writeFileSync(outputPath, JSON.stringify(allAccountTrades, null, 2), 'utf8');

    console.log('\n======================================================');
    console.log(`üéâ HO√ÄN T·∫§T!`);
    console.log(`   - ƒê√£ x·ª≠ l√Ω t·ªïng c·ªông: ${SYMBOLS_TO_CHECK.length} symbols.`);
    console.log(`   - T·ªïng s·ªë giao d·ªãch l·∫•y ƒë∆∞·ª£c: ${allAccountTrades.length}`);
    console.log(`   - K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: ${outputPath}`);
    console.log('======================================================');
}

main();