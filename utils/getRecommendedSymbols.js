const axios = require('axios');

// Base URL cho API Binance Futures
const BINANCE_FUTURES_API_BASE_URL = 'https://fapi.binance.com';

/**
 * L·∫•y d·ªØ li·ªáu th·ªëng k√™ 24 gi·ªù cho t·∫•t c·∫£ c√°c c·∫∑p giao d·ªãch tr√™n Binance Futures.
 */
async function getFutures24hrTickerData() {
    const endpoint = '/fapi/v1/ticker/24hr';
    try {
        const response = await axios.get(`${BINANCE_FUTURES_API_BASE_URL}${endpoint}`);
        return response.data;
    } catch (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu ticker 24 gi·ªù t·ª´ Binance Futures:', error.message);
        return [];
    }
}

/**
 * L·∫•y d·ªØ li·ªáu open interest cho m·ªôt symbol c·ª• th·ªÉ.
 */
async function getOpenInterest(symbol) {
    const endpoint = '/fapi/v1/openInterest';
    try {
        const response = await axios.get(`${BINANCE_FUTURES_API_BASE_URL}${endpoint}`, {
            params: { symbol }
        });
        return response.data;
    } catch (error) {
        // L·ªói n√†y c√≥ th·ªÉ x·∫£y ra th∆∞·ªùng xuy√™n v·ªõi c√°c symbol kh√¥ng c√≥ OI, n√™n gi·∫£m m·ª©c ƒë·ªô log
        // console.error(`L·ªói khi l·∫•y open interest cho ${symbol}:`, error.message);
        return null;
    }
}

/**
 * L·∫•y d·ªØ li·ªáu funding rate cho t·∫•t c·∫£ c√°c c·∫∑p.
 */
async function getAllFundingRates() {
    const endpoint = '/fapi/v1/fundingRate';
    try {
        const response = await axios.get(`${BINANCE_FUTURES_API_BASE_URL}${endpoint}`);
        // T·∫°o m·ªôt map ƒë·ªÉ truy c·∫≠p nhanh funding rate theo symbol
        const fundingRateMap = new Map();
        response.data.forEach(item => {
            fundingRateMap.set(item.symbol, item);
        });
        return fundingRateMap;
    } catch (error) {
        console.error('L·ªói khi l·∫•y t·∫•t c·∫£ funding rates:', error.message);
        return new Map();
    }
}


/**
 * Ph√¢n t√≠ch c√°c c·∫∑p giao d·ªãch Binance Futures ƒë·ªÉ t√¨m ki·∫øm ti·ªÅm nƒÉng.
 */
async function analyzeFuturesCoinsForPotential(tickerData, fundingRateMap) {
    const highVolume = [];
    const largePriceChange = [];
    const increasingOI = [];
    const abnormalFundingRate = [];

    const MIN_QUOTE_VOLUME = 50_000_000; // 50 tri·ªáu USDT
    const PRICE_CHANGE_THRESHOLD = 5; // 5%
    const ABNORMAL_FUNDING_RATE_THRESHOLD = 0.0005; // 0.05%

    // L·ªçc c√°c symbol c√≥ volume cao ho·∫∑c % thay ƒë·ªïi gi√° l·ªõn ƒë·ªÉ t·ªëi ∆∞u h√≥a
    const filteredByTicker = tickerData.filter(item => {
        const quoteVolume = Number(item.quoteVolume);
        const priceChangePercent = Number(item.priceChangePercent);
        return item.symbol.endsWith('USDT') && (quoteVolume > MIN_QUOTE_VOLUME || Math.abs(priceChangePercent) > PRICE_CHANGE_THRESHOLD);
    });

    // L·∫•y d·ªØ li·ªáu Open Interest cho c√°c symbol ƒë√£ l·ªçc
    for (const item of filteredByTicker) {
        const symbol = item.symbol;
        const quoteVolume = Number(item.quoteVolume);
        const priceChangePercent = Number(item.priceChangePercent);
        const fundingInfo = fundingRateMap.get(symbol);

        // 1. Volume cao
        if (quoteVolume > MIN_QUOTE_VOLUME) {
            highVolume.push({ symbol, value: quoteVolume });
        }

        // 2. % Thay ƒë·ªïi gi√° l·ªõn
        if (Math.abs(priceChangePercent) > PRICE_CHANGE_THRESHOLD) {
            largePriceChange.push({ symbol, value: priceChangePercent });
        }

        // 3. Funding Rate b·∫•t th∆∞·ªùng
        if (fundingInfo && Math.abs(Number(fundingInfo.fundingRate)) > ABNORMAL_FUNDING_RATE_THRESHOLD) {
            abnormalFundingRate.push({ symbol, value: Number(fundingInfo.fundingRate) });
        }

        // 4. Open Interest (ch·ªâ l·∫•y cho c√°c coin ƒë√£ l·ªçt v√†o 3 ti√™u ch√≠ tr√™n)
        if (highVolume.find(c => c.symbol === symbol) || largePriceChange.find(c => c.symbol === symbol) || abnormalFundingRate.find(c => c.symbol === symbol)) {
            const oi = await getOpenInterest(symbol);
            if (oi && oi.openInterest > 0) {
                // Logic OI tƒÉng c·∫ßn so s√°nh v·ªõi d·ªØ li·ªáu c≈©. T·∫°m th·ªùi d√πng gi√° tr·ªã tuy·ªát ƒë·ªëi.
                increasingOI.push({ symbol, value: Number(oi.openInterest) });
            }
        }
    }

    // S·∫Øp x·∫øp v√† l·∫•y top 4
    highVolume.sort((a, b) => b.value - a.value);
    largePriceChange.sort((a, b) => Math.abs(b.value) - Math.abs(a.value));
    increasingOI.sort((a, b) => b.value - a.value);
    abnormalFundingRate.sort((a, b) => Math.abs(b.value) - Math.abs(a.value));

    return {
        highVolume: highVolume.slice(0, 4),
        largePriceChange: largePriceChange.slice(0, 4),
        increasingOI: increasingOI.slice(0, 4),
        abnormalFundingRate: abnormalFundingRate.slice(0, 4)
    };
}


/**
 * T·∫°o danh s√°ch 16 coin ƒë√°ng ch√∫ √Ω theo logic ∆∞u ti√™n.
 */
function createNotableCoinsList(analysisData) {
    const notableCoins = new Set();
    const coinCount = {};

    const categoryLists = {
        highVolume: analysisData.highVolume.map(item => item.symbol),
        largePriceChange: analysisData.largePriceChange.map(item => item.symbol),
        increasingOI: analysisData.increasingOI.map(item => item.symbol),
        abnormalFundingRate: analysisData.abnormalFundingRate.map(item => item.symbol)
    };

    // B∆∞·ªõc 1: ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói coin
    Object.values(categoryLists).flat().forEach(symbol => {
        coinCount[symbol] = (coinCount[symbol] || 0) + 1;
    });

    // B∆∞·ªõc 2: S·∫Øp x·∫øp c√°c coin theo s·ªë l·∫ßn xu·∫•t hi·ªán gi·∫£m d·∫ßn
    const sortedByCount = Object.keys(coinCount).sort((a, b) => coinCount[b] - coinCount[a]);

    // B∆∞·ªõc 3: Th√™m coin theo m·ª©c ƒë·ªô ∆∞u ti√™n (xu·∫•t hi·ªán 4, 3, 2 l·∫ßn)
    [4, 3, 2].forEach(count => {
        sortedByCount.forEach(symbol => {
            if (coinCount[symbol] === count) {
                notableCoins.add(symbol);
            }
        });
    });

    // B∆∞·ªõc 4: B·ªï sung tu·∫ßn t·ª± theo th·ª© h·∫°ng (top 1, 2, 3, 4)
    for (let i = 0; i < 4; i++) {
        Object.values(categoryLists).forEach(list => {
            if (list[i] && !notableCoins.has(list[i])) {
                notableCoins.add(list[i]);
            }
        });
    }

    // Tr·∫£ v·ªÅ m·∫£ng 16 coin ƒë·∫ßu ti√™n
    return Array.from(notableCoins).slice(0, 16);
}


/**
 * T·∫°o HTML buttons cho m·ªôt danh s√°ch symbol
 */
function generateSymbolButtons(symbols, type) {
    let buttonStyle = '';
    switch (type) {
        case 'notable':
            buttonStyle = 'background: #6f42c1; color: white; border: 1px solid #c8b6e2;';
            break;
        // Gi·ªØ c√°c case c≈© n·∫øu c·∫ßn d√πng l·∫°i
        default:
            buttonStyle = 'background: #6c757d; color: white;';
    }

    // ƒê·∫£m b·∫£o symbols l√† m·ªôt m·∫£ng
    if (!Array.isArray(symbols)) return '';

    return symbols.map(symbol =>
        `<button class="symbol-btn" onclick="changeSymbol('${symbol}')" style="${buttonStyle}">${symbol}</button>`
    ).join('\n    ');
}

// Cache cho recommended symbols
let cachedRecommendedSymbols = null;
let lastUpdateTime = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

/**
 * L·∫•y c√°c symbol ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t (c√≥ cache)
 */
async function getRecommendedSymbols(forceRefresh = false) {
    const now = Date.now();

    if (!forceRefresh && cachedRecommendedSymbols && lastUpdateTime && (now - lastUpdateTime < CACHE_DURATION)) {
        console.log('S·ª≠ d·ª•ng cached recommended symbols');
        return cachedRecommendedSymbols;
    }

    try {
        console.log('ƒêang c·∫≠p nh·∫≠t recommended symbols t·ª´ Binance Futures...');
        const [tickerData, fundingRateMap] = await Promise.all([
            getFutures24hrTickerData(),
            getAllFundingRates()
        ]);

        if (tickerData.length === 0) {
            console.warn('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ticker, s·ª≠ d·ª•ng symbols m·∫∑c ƒë·ªãnh');
            return cachedRecommendedSymbols || getDefaultSymbols();
        }

        const analysis = await analyzeFuturesCoinsForPotential(tickerData, fundingRateMap);

        // T·∫°o danh s√°ch 16 coin ƒë√°ng ch√∫ √Ω
        const notableCoinsList = createNotableCoinsList(analysis);

        // T·∫°o HTML buttons cho danh s√°ch n√†y
        const notableCoinButtons = generateSymbolButtons(notableCoinsList, 'notable');

        cachedRecommendedSymbols = {
            notableCoinsList,
            notableCoinButtons,
            rawData: analysis, // Gi·ªØ l·∫°i d·ªØ li·ªáu g·ªëc ƒë·ªÉ debug
            updateTime: new Date().toISOString()
        };

        lastUpdateTime = now;
        console.log(`ƒê√£ c·∫≠p nh·∫≠t ${notableCoinsList.length} recommended symbols th√†nh c√¥ng.`);
        return cachedRecommendedSymbols;

    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t recommended symbols:', error.message);
        return cachedRecommendedSymbols || getDefaultSymbols();
    }
}

/**
 * Tr·∫£ v·ªÅ symbols m·∫∑c ƒë·ªãnh khi kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu
 */
function getDefaultSymbols() {
    return ""
    const defaultList = [
        'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'BNBUSDT',
        'DOGEUSDT', 'XRPUSDT', 'PEPEUSDT', 'NOTUSDT',
        'WLDUSDT', 'LINKUSDT', 'AVAXUSDT', 'ADAUSDT',
        'MATICUSDT', 'DOTUSDT', 'ONDOUSDT', 'SUIUSDT'
    ];

    return {
        notableCoinsList: defaultList,
        notableCoinButtons: generateSymbolButtons(defaultList, 'notable'),
        rawData: {},
        updateTime: new Date().toISOString()
    };
}

/**
 * B·∫Øt ƒë·∫ßu background job c·∫≠p nh·∫≠t m·ªói 5 ph√∫t
 */
function startBackgroundUpdate() {
    console.log('üöÄ Kh·ªüi ƒë·ªông background update cho recommended symbols m·ªói 5 ph√∫t');

    getRecommendedSymbols(true).catch(err => {
        console.error('‚ùå Initial recommended symbols update failed:', err.message);
    });

    setInterval(() => {
        console.log('üîÑ Background update: Refreshing recommended symbols...');
        getRecommendedSymbols(true).catch(err => {
            console.error('‚ùå Background update failed:', err.message);
        });
    }, CACHE_DURATION);
}

module.exports = {
    getRecommendedSymbols,
    startBackgroundUpdate
};